-- Copyright Â© 2020 Digital Asset (Switzerland) GmbH and/or its affiliates
-- Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted.
-- THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL 
-- DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

module Main where

inefficientFibonacci n =
  case n of
    0 -> 0
    1 -> 1
    m -> inefficientFibonacci (m - 2) + inefficientFibonacci (m - 1)

template Result
  with
    owner: Party
    result: Int
  where
    signatory owner

template InefficientFibonacci
  with
    owner: Party
  where
    signatory owner
    controller owner can
      InefficientFibonacciCompute: ContractId Result
        with
          n: Int
        do create Result with owner = owner; result = inefficientFibonacci n

eventuallyTerminates : Scenario ()
eventuallyTerminates = scenario do
  owner <- getParty "owner"
  fib <- submit owner do
    create InefficientFibonacci with
      owner = owner
  let loops = 31
  resultId <- submit owner do
    exercise fib InefficientFibonacciCompute with
      n = loops
  result <- submit owner do fetch resultId
  return ()