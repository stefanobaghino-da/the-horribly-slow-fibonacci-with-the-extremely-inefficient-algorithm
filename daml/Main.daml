module Main where

inefficientFibonacci n =
  case n of
    0 -> 0
    1 -> 1
    m -> inefficientFibonacci (m - 2) + inefficientFibonacci (m - 1)

template Result
  with
    owner: Party
    result: Int
  where
    signatory owner

template InefficientFibonacci
  with
    owner: Party
  where
    signatory owner
    controller owner can
      InefficientFibonacciCompute: ContractId Result
        with
          n: Int
        do create Result with owner = owner; result = inefficientFibonacci n

eventuallyTerminates : Scenario ()
eventuallyTerminates = scenario do
  owner <- getParty "owner"
  fib <- submit owner do
    create InefficientFibonacci with
      owner = owner
  let loops = 31
  resultId <- submit owner do
    exercise fib InefficientFibonacciCompute with
      n = loops
  result <- submit owner do fetch resultId
  return ()